package core

// 8bit setter operator
func (c *GbCore) setter_8(val byte) func(byte) {

	var f func(byte) 

	switch val {
	// B
	case 0x04, 0x05, 0x06,
		0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47:
		f = c.GbCpu.SetB
	// C
	case 0x0c, 0x0d, 0x0e, 
		0x38,
		0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,
		0xd8, 0xda, 0xdc:
		f = c.GbCpu.SetC
	// D
	case 0x14, 0x15, 0x16,
		0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57:
		f = c.GbCpu.SetD
	// E
	case 0x1c, 0x1d, 0x1e,
		0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f:
		f = c.GbCpu.SetE
	// H
	case 0x24, 0x25, 0x26,
		0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67:
		f = c.GbCpu.SetH
	// L
	case 0x2c, 0x2d, 0x2e,
		0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f:
		f = c.GbCpu.SetL
	// (HL)
	case 0x34, 0x35, 0x36,
		0x70, 0x71, 0x72, 0x73, 0x74, 0x75,       0x77,
		0xe9,
		0x22, 0x32:
		f = c.msetHL
	// A
	case 0x0a,
		0x1a,
		0x2a,
		0x3a, 0x3c, 0x3d, 0x3e,
		0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 
		0xc6, 0xce,
		0xde,
		0xf0, 0xf2, 0xfa:
		f = c.GbCpu.SetA

	// (BC)
	case 0x02:
		f = c.msetBC
	// (DE)
	case 0x12:
		f = c.msetDE
	// (C)
	case 0xe2:
		f = c.msetC
	// (a16)
	case 0xea:
		f = c.msetA16
	// (a8)
	case 0xe0:
		f = c.msetA8
	}

	return f
}
// 8bit left operand
// ADD SUB ...
// INC, DEC
func (c *GbCore) operand_l8(val byte) byte {

	var f byte 

	switch val {

	// B
	case 0x80, 0x90, 0xa0, 0xb0,
		 0x88, 0x98, 0xa8, 0xb8,
		 0x04, 0x05:
		f = c.GbCpu.GetB()
	// C
	case 0x81, 0x91, 0xa1, 0xb1,
		0x89, 0x99, 0xa9, 0xb9, 
		0x0c, 0x0d:
		f = c.GbCpu.GetC()
	// D
	case 0x82, 0x92, 0xa2, 0xb2,
		0x8a, 0x9a, 0xaa, 0xba,
		0x14, 0x15:
		f = c.GbCpu.GetD()
	// E
	case 0x83, 0x93, 0xa3, 0xb3,
		0x8b, 0x9b, 0xab, 0xbb, 
		0x1c, 0x1d:
		f = c.GbCpu.GetE()
	// H
	case 0x84, 0x94, 0xa4, 0xb4,
		0x8c, 0x9c, 0xac, 0xbc,
		0x24, 0x25:
		f = c.GbCpu.GetH()
	// L
	case 0x85, 0x95, 0xa5, 0xb5,
		0x8d, 0x9d, 0xad, 0xbd, 
		0x2c, 0x2d:
		f = c.GbCpu.GetL()
	// (HL)
	case 0x86, 0x96, 0xa6, 0xb6,
		0x8e, 0x9e, 0xae, 0xbe,
		0x34, 0x35:
		f = c.GbMmu.Get(c.GbCpu.GetHL())
	// A
	case 0x87, 0x97, 0xa7, 0xb7,
		0x8f, 0x9f, 0xaf, 0xbf, 
		0x3c, 0x3d:
		f = c.GbCpu.GetA()

	// d8
	case 0xc6, 0xd6, 0xe6, 0xf6, 0xce, 0xde, 0xee, 0xfe:
		f =  c.getuint8()
	}
	return f
}
// 8bit right operand
//LD 
func (c *GbCore) operand_r8(val byte) byte {

	var f byte 

	switch val {
	// B
	case 0x40, 0x50, 0x60, 0x70,
		0x48, 0x58, 0x68, 0x78:
		f = c.GbCpu.GetB()
	// C
	case 0x41, 0x51, 0x61, 0x71,
		0x49, 0x59, 0x69, 0x79:
		f = c.GbCpu.GetC()
	// D
	case 0x42, 0x52, 0x62, 0x72,
		0x4a, 0x5a, 0x6a, 0x7a:
		f = c.GbCpu.GetD()
	// E
	case 0x43, 0x53, 0x63, 0x73,
		0x4b, 0x5b, 0x6b, 0x7b:
		f = c.GbCpu.GetE()
	// H
	case 0x44, 0x54, 0x64, 0x74,
		0x4c, 0x5c, 0x6c, 0x7c:
		f = c.GbCpu.GetH()
	// L
	case 0x45, 0x55, 0x65, 0x75,
		0x4d, 0x5d, 0x6d, 0x7d:
		f = c.GbCpu.GetL()
	// (HL)
	case 0x46, 0x56, 0x66,
		0x4e, 0x5e, 0x6e, 0x7e,
		0x2a, 0x3a:
		f = c.GbMmu.Get(c.GbCpu.GetHL())
	// A
	case 0x02, 0x12, 0x22, 0x32, 
		0x47, 0x57, 0x67, 0x77,
		0x4f, 0x5f, 0x6f, 0x7f,
		0xe0, 0xe2, 0xea:
		f = c.GbCpu.GetA()

	// (BC)
	case 0x0a:
		f = c.GbMmu.Get(c.GbCpu.GetBC())
	// (DE)
	case 0x1a:
		f = c.GbMmu.Get(c.GbCpu.GetDE())
	// (C)
	case 0xf2:
		f = c.GbMmu.Get( 0xff00 + uint16(c.GbCpu.GetC()))
	// (a16)
	case 0xfa:
		f = c.GbMmu.Get(c.getuint16())
	// (a8)
	case 0xf0:
		f = c.GbMmu.Get( 0xff00 + uint16(c.getuint8()))
	// d8
	case 0x06, 0x16, 0x26, 0x36, 0x0e, 0x1e, 0x2e, 0x3e:
		f =  c.getuint8()
	}

	return f
}
// 16bit setter operator
func (c *GbCore) setter_16(val byte) func(uint16) {

	var f func(uint16) 

	switch val {
	// BC
	case 0x03, 0x0b, 0x01, 0xc1:
		f = c.GbCpu.SetBC
	// DE
	case 0x13, 0x1b, 0x11, 0xd1:
		f = c.GbCpu.SetDE
	// HL
	case 0x23, 0x2b, 0x21, 0xe1:
		f = c.GbCpu.SetHL
	// SP
	case 0x33, 0x3b, 0x31, 0xf9, 0xf1:
		f = c.GbCpu.SetSP
	case 0x08:
		f = c.msetA32
	}
	return f
}
// 16bit left operand
func (c *GbCore) operand_l16(val byte) uint16 {

	var f uint16 

	switch val {
	// BC
	case 0x03, 0x0b, 0xc5:
		f = c.GbCpu.GetBC()
	// DE
	case 0x13, 0x1b, 0xd5:
		f = c.GbCpu.GetDE()
	// HL
	case 0x23, 0x2b, 0xe5:
		f = c.GbCpu.GetHL()
	// SP
	case 0x33, 0x3b, 0xf5:
	f = c.GbCpu.GetSP()
	}
	return f
}
// 16bit right operand
func (c *GbCore) operand_r16(val byte) uint16 {

	var f uint16 

	switch val {
	// BC
	case 0x09:
		f = c.GbCpu.GetBC()
	// DE
	case 0x19:
		f = c.GbCpu.GetDE()
	// HL
	case 0x29, 0xf9:
		f = c.GbCpu.GetHL()
	// SP
	case 0x39, 0x08:
		f = c.GbCpu.GetSP()
	// d16
	case 0x01, 0x11, 0x21, 0x31:
		f = c.getuint16()
	}

	return f
}
// Boolean 
func (c *GbCore) tester(val byte) bool {

	var f bool

	switch val {
	// NZ
	case 0x20, 0xc0, 0xc2, 0xc4:
		if c.GbCpu.GetfZ() == 1 {
			f = false
		} else {
			f = true
		}
	// Z
	case 0x28, 0xc8, 0xca, 0xcc:
		if c.GbCpu.GetfZ() == 1 {
			f = true
		} else {
			f = false
		}
	// NC
	case 0x30, 0xd0, 0xd2, 0xd4:
		if c.GbCpu.GetfC() == 1 {
			f = false
		} else {
			f = true
	}
	// C
	case 0x38, 0xd8, 0xda, 0xdc:
		if c.GbCpu.GetfC() == 1 {
			f = true
		} else {
			f = false
	}
	// TRUE
	case 0x18, 0xc3, 0xc9, 0xcd, 0xd9:
		f = true
	}
	return f
}